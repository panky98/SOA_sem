version: '3.4'

services:
  datamicroservice:
    image: ${DOCKER_REGISTRY-}datamicroservice
    container_name: datamicroservice
    ports:
        - 53800:80
    expose:
        - 51800
        - 80
    depends_on:
        - emqx
        - redis-api
        - kuiper
    links:
        - redis-api 
    build:
      context: .
      dockerfile: DataMicroservice/Dockerfile

  hightempandhumiditysensorms:
    image: ${DOCKER_REGISTRY-}hightempandhumiditysensorms
    container_name: hightempandhumiditysensorms
    ports:
        - 53804:80
    expose:
        - 80
    links:
        - datamicroservice
    depends_on:
        - datamicroservice
    build:
      context: .
      dockerfile: HighTempAndHumiditySensorMS/Dockerfile


  stableconditionssensorms:
    image: ${DOCKER_REGISTRY-}stableconditionssensorms
    container_name: stableconditionssensorms
    ports:
        - 53805:80
    expose:
        - 80
    links:
        - datamicroservice
    depends_on:
        - datamicroservice
    build:
      context: .
      dockerfile: StableConditionsSensorMS/Dockerfile

  redis-api:
    image: redis:latest
    depends_on:
        - emqx

  redis-api-events:
    image: redis:latest
    depends_on:
        - commandmicroservice


  commandmicroservice:
    image: ${DOCKER_REGISTRY-}commandmicroservice
    ports:
        - 53806:80
    expose:
        - 80
    links:
        - datamicroservice
    depends_on:
        - emqx
        - datamicroservice
        - stableconditionssensorms
        - hightempandhumiditysensorms
    build:
      context: .
      dockerfile: CommandMicroservice/Dockerfile

  emqx:
    image: 'emqx/emqx:latest'
    ports:
        - 1883:1883
        - 8081:8081
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx_ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5

  kuiper:
    image: 'emqx/kuiper:1.2.0-alpine'
    ports:
        - 9081:9081
    environment:
      MQTT_SOURCE__DEFAULT__SERVERS: "[tcp://emqx:1883]"
    depends_on:
        emqx:
            condition: service_healthy


  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    ports:
        - 53807:80
    expose:
        - 80
    depends_on:
        - datamicroservice
        - stableconditionssensorms
        - hightempandhumiditysensorms
    build:
      context: .
      dockerfile: APIGateway/Dockerfile

  dashboard:
    build:
      context: .
      dockerfile: dashboard/Dockerfile
    environment:
      - NODE_ENV=production
    command: npm start
    ports:
      - 3000:3000
    volumes:
      - "./dashboard:/app"
      - "/app/node_modules/"